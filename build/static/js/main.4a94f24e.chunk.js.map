{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","parseProducts","array","items","forEach","e","index","str","productId","length","products","push","id","amount","findDate","arrayParsedText","foundIndex","findIndex","i","slice","parsePdf","a","files","target","reader","FileReader","readAsDataURL","onload","event","pdfjsLib","getDocument","result","promise","then","pdf","parsedText","_pdfInfo","numPages","parseText","textContent","lastY","myArray","item","transform","getPage","page","getTextContent","concat","supplier","supplierList","some","el","includes","search","hasOwnProperty","name","children","elChild","sheetNumber","sheetDate","setState","showProducts","copyJSON","reason","console","error","copyCodeToClipboard","textArea","current","select","document","execCommand","state","createRef","prevProps","prevState","snapshot","this","className","onClick","type","onChange","multiple","ref","style","width","rows","value","JSON","stringify","readOnly","Component","Boolean","window","location","hostname","match","GlobalWorkerOptions","workerSrc","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4a94f24e.chunk.js","sourcesContent":["import React, {Component, createRef} from 'react';\n\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showProducts: false,\n            supplier: null,\n            products: [],\n            sheetNumber: null,\n            copyJSON: false\n        }\n        this.textArea = createRef();\n        this.products = [];\n        this.supplierList = [\n            {search: \"Бауцентр\",\n                children: [{\n                    search: \"10 лет Октября\",\n                    name: \"Бау 10 лет\",\n                }, {\n                    search: \"Волгоградская\",\n                    name: \"Бау Вол\",\n                }]},\n            {search: \"Леруа\",\n                children: [{\n                    search: \"Архитекторов\",\n                    name: \"Леруа Арх\",\n                }, {\n                    search: \"Амурская\",\n                    name: \"Леруа Амур\",\n                }]},\n            {search: \"ОБИ\",\n                name: \"Оби\"}\n        ];\n\n    }\n\n    parseProducts = (array) => {\n        array.items.forEach((e, index) => {\n            if ( (e.str === \"ПОД\") || (e.str === \"БТП\") ) {\n                let productId = array.items[index - 3].str;\n                if (array.items[index - 3].str.length < 3) {\n                    productId = array.items[index - 4].str\n                }\n                this.products.push({id: productId,\n                    // Название товара добавляется позже\n                    // name: undefined,\n                    amount: array.items[index + 2].str,\n                    //  weight: convertToNumber(array.items[index + 5].str),\n                    //  priceInclVAT: convertToNumber(array.items[index + 11].str),\n                });\n            }\n        });\n    }\n\n    // Добавление названия товара, через id товара\n    // addProductName = () => {\n    //     return this.products.map((el) => {\n    //          const currentIndex = parsedText.findIndex((i) => i === el.id);\n    //          el.name = parsedText[currentIndex - 2] + parsedText[currentIndex - 1];\n    //          return el;\n    //      })\n    // }\n\n    findDate = (arrayParsedText) => {\n        let foundIndex = arrayParsedText.findIndex((i) => i === \"Номер \");\n        if (arrayParsedText[foundIndex + 1] === \"документа\") {\n            return arrayParsedText[foundIndex + 2];\n        }\n        if (arrayParsedText.length > 0 && foundIndex !== -1) {\n            return this.findDate(arrayParsedText.slice(foundIndex + 1));\n        } else {\n            return undefined;\n        }\n    }\n\n\n    parsePdf = async (e) => {\n\n        let files = e.target.files;\n        let reader = new FileReader();\n        reader.readAsDataURL(files[0]);\n        reader.onload=(event)=> {\n\n            let loadingTask = this.props.pdfjsLib.getDocument(event.target.result);\n\n            loadingTask.promise.then( (pdf) => {\n\n                (async () => {\n                    let parsedText = [];\n                    this.products = [];\n                    for (let i = 1; i <= pdf._pdfInfo.numPages; i++) {\n\n                        let page = await pdf.getPage(i)\n                        let result = await page.getTextContent();\n\n                        function parseText(textContent) {\n                            let lastY, myArray = [\"\"];\n                            for (let item of textContent.items) {\n                                if (lastY === item.transform[5] || !lastY) {\n                                    myArray[myArray.length - 1] += item.str;\n                                } else {\n                                    myArray.push(item.str);\n                                }\n                                lastY = item.transform[5];\n                            }\n                            //console.log(myArray);\n                            return myArray;\n                        }\n\n                        this.parseProducts(result);\n                        parsedText = parsedText.concat(parseText(result));\n                    }\n\n\n                    let supplier = parsedText[parsedText.findIndex((i) => i === \"Вид деятельности по ОКДП\") + 1];\n\n                    this.supplierList.some( (el) => {\n                        if (supplier.includes( el.search)) {\n                            if (el.hasOwnProperty(\"name\")) {\n                                supplier = el.name;\n                                return true;\n                            } else {\n                              return el.children.some( elChild => {\n                                  if ( supplier.includes( elChild.search ) ) {\n                                      supplier = elChild.name;\n                                      return true;\n                                  }\n                                  return false;\n                              })\n                            }\n                        }\n                        return false;\n                    });\n\n                    let sheetNumber = parsedText[parsedText.findIndex((i) => i === \"ТОВАРНАЯ НАКЛАДНАЯ\") + 1];\n\n                    let sheetDate = this.findDate(parsedText);\n\n\n                    this.setState({\n                        supplier: supplier,\n                        products: this.products,\n                        sheetNumber: sheetNumber,\n                        sheetDate: sheetDate,\n                        showProducts: true,\n                        copyJSON: true\n                    });\n\n\n\n\n                })(this);\n\n\n\n\n            }, function (reason) {\n                // PDF loading error\n                console.error(reason);\n            });\n        }\n\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.copyJSON) {\n            this.copyCodeToClipboard();\n        }\n    }\n\n    copyCodeToClipboard = () => {\n        this.textArea.current.select();\n        document.execCommand(\"copy\");\n\n    }\n\n    render() {\n            return (\n                <div className=\"App\">\n                    {this.state.copyJSON && <div className=\"popup\"><p>JSON Скопирован!</p><p><button onClick={() => this.setState({copyJSON:false})}>Закрыть</button></p></div>}\n                    <div className=\"appSlitBlock\">\n                        <div className=\"chooseFile\">\n                            <h2>Выберите файл для парсинга:</h2>\n                            <input type=\"file\" id=\"input\" onChange={(e) => this.parsePdf(e)} multiple />\n                        </div>\n                    </div>\n                    <div  className=\"appSlitBlock\">\n                        <div className=\"parseResult\">\n                            <p>Поставщик:</p><p><code>{this.state.supplier || \"...\"}</code></p>\n                            <p>Номер документа:</p>\n                            <p><code>{this.state.sheetNumber || \"...\"}</code></p>\n                            <p>Дата документа:</p>\n                            <p><code>{this.state.sheetDate || \"...\"}</code></p>\n                            <p>Товары:</p>\n                            <textarea ref={this.textArea}\n                                      style={{width:\"100%\"}}\n                                      rows=\"10\"\n                                      value={this.state.showProducts ? JSON.stringify({supplier: this.state.supplier,sheetDate: this.state.sheetDate, sheetNumber: this.state.sheetNumber, products: this.state.products}) : \"\"}\n                                      readOnly={true} />\n                        </div>\n                    </div>\n\n\n                </div>\n            );\n        }\n\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet pdfjsLib = window['pdfjs-dist/build/pdf'];\npdfjsLib.GlobalWorkerOptions.workerSrc = '//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.5.207/pdf.worker.min.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App pdfjsLib={pdfjsLib}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}